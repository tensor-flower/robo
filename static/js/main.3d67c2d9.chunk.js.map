{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","components/ErrorBoundary.js","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","Card","key","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","header","PureComponent","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","err","info","setState","Component","App","OnRequestRobots","filteredBots","filter","robot","toLowerCase","includes","searchField","Header","components_SearchBox","OnSearchChange","isPending","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","initialStateSearch","initialStateRobot","rootReducer","createLogger","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3d67c2d9.chunk.js","sourcesContent":["import React from 'react';\n\nconst card = ({id,name,email})=>{\n    return (\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='placeholder' \n            src={`https://robohash.org/${id}?200x200`}></img>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\nexport default card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots})=>{\n    return (        \n        <div>\n            {robots.map((user,i)=>{\n                return <Card key={robots[i].id} id={robots[i].id} \n                    name={robots[i].name} \n                    username={robots[i].username} \n                    email={robots[i].email}/>\n            })}\n        </div>\n    );\n};\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange})=>{\n    return (\n        <div className='pa2'>\n            <input \n            className='pa3 ba b--green bg-lightest-blue'\n            type=\"search\" \n            placeholder=\"search robots\"\n            onChange={searchChange}/>\n        </div>\n    );\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props)=>{\n    return (\n        <div style={{overflowY:'scroll', height:'100vh'}}>\n            {props.children}\n        </div>\n    );\n}\nexport default Scroll;","import React,{PureComponent} from 'react';\n\nclass header extends PureComponent { \n    /*shouldComponentUpdate(nextProps, nextState){\n        return false;\n    }*/\n    render() {\n        return <div>\n            <h1 className='yellow'>Robo Friends</h1>\n        </div>\n    };\n};\nexport default header; ","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props){\n      super(props);\n      this.state={\n        hasError:false\n      };\n    }\n    \n    componentDidCatch(err,info){\n        this.setState({hasError:true})\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Oooops. That is not good.</h1>\n        }\n        return this.props.children\n    }\n};\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from './components/CardList';\nimport SearchBox from './components/SearchBox';\nimport Scroll from './components/Scroll';\nimport Header from './components/Header';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport 'tachyons';\nimport {setSearchField, requestRobots} from './actions';\nimport {connect} from 'react-redux';\n\n//subscribe to redux state updates\n//every time your state is changed \n//mapStateToProps will be called with your new state \n//and subsequently as your props update \n//component will run render function \n//to render your component in browser\nconst mapStateToProps = state=>{\n  //console.log(state)\n  return{\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    err: state.requestRobots.err\n  };\n}\n\n//dispatch an action to the store\nconst mapDispatchToProps = dispatch=>{\n  return {\n    OnSearchChange: (event)=>{\n      dispatch(setSearchField(event.target.value))\n    },\n    OnRequestRobots: ()=>dispatch(requestRobots())\n  };\n}\n\nclass App extends Component {\n  componentDidMount(){\n    //console.log(this.props)\n    this.props.OnRequestRobots()\n  }\n  \n  render() {\n    const filteredBots = this.props.robots.filter(robot=>{\n      return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\n    });\n    return (\n      <div className='tc'>\n        <Header />\n        <SearchBox searchChange={this.props.OnSearchChange}/>\n        {(!this.props.isPending)\n        ?<Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredBots}/>\n          </ErrorBoundary>\n        </Scroll>\n        :<p>loading</p>\n        }\n      </div>\n    );\n  }\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n ","import {CHANGE_SEARCHFIELD,\n    REQUEST_SUCCESS,REQUEST_PENDING,REQUEST_FAILED} from './constants';\n\nexport const setSearchField = (text)=>({\n    //text is the user input\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n});\n\nexport const requestRobots = ()=>(dispatch)=>{\n    dispatch({type:REQUEST_PENDING})\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(data=>{\n        dispatch({type:REQUEST_SUCCESS,payload:data})\n    }).catch(err=>dispatch({type:REQUEST_FAILED,payload:err}))\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\nexport const REQUEST_PENDING = 'REQUEST_PENDING';\nexport const REQUEST_SUCCESS = 'REQUEST_SUCCESS';\nexport const REQUEST_FAILED = 'REQUEST_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCHFIELD,\n    REQUEST_SUCCESS,REQUEST_PENDING,REQUEST_FAILED } from \"./constants\";\n\nconst initialStateSearch = {\n    searchField:\"\"\n}\n//reducer is a pure function that \n//takes the previous state and an action\n//and returns the next state.\nexport const searchRobots = (state=initialStateSearch, action={})=>{\n    switch(action.type){\n        case CHANGE_SEARCHFIELD:\n            return Object.assign({},state,{searchField:action.payload}); \n        default:\n            return state;\n    }\n}\n\nconst initialStateRobot = {\n    isPending:false,\n    robots:[],\n    err: ''\n}\n\nexport const requestRobots = (state=initialStateRobot,action={})=>{\n    switch(action.type){\n        case REQUEST_PENDING:\n            return Object.assign({},state,{isPending:true})\n        case REQUEST_SUCCESS:\n            return Object.assign({},state,\n                {isPending:false,robots:action.payload})\n        case REQUEST_FAILED:\n            return Object.assign({},state,\n                {isPending:false,err:action.payload})\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './reducers';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots});\n//root reducer is the argument\nconst store = createStore(rootReducer,\n    applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>\n        ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}